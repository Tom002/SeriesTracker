// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WatchingService.Data;

namespace WatchingService.Migrations
{
    [DbContext(typeof(WatchingDbContext))]
    [Migration("20200929093810_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WatchingService.Models.Episode", b =>
                {
                    b.Property<int>("EpisodeId")
                        .HasColumnType("int");

                    b.Property<string>("CoverImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EpisodeNumber")
                        .HasColumnType("int");

                    b.Property<string>("EpisodeTitle")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("Release")
                        .HasColumnType("datetime2");

                    b.Property<int>("Season")
                        .HasColumnType("int");

                    b.Property<int>("SeriesId")
                        .HasColumnType("int");

                    b.HasKey("EpisodeId");

                    b.ToTable("Episode");
                });

            modelBuilder.Entity("WatchingService.Models.EpisodeWatched", b =>
                {
                    b.Property<string>("ViewerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("EpisodeId")
                        .HasColumnType("int");

                    b.HasKey("ViewerId", "EpisodeId");

                    b.HasIndex("EpisodeId");

                    b.ToTable("EpisodeWatched");
                });

            modelBuilder.Entity("WatchingService.Models.ProcessedEvent", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EventId");

                    b.ToTable("ProcessedEvents");
                });

            modelBuilder.Entity("WatchingService.Models.Series", b =>
                {
                    b.Property<int>("SeriesId")
                        .HasColumnType("int");

                    b.Property<string>("CoverImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EndYear")
                        .HasColumnType("int");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("SeriesId");

                    b.ToTable("Series");
                });

            modelBuilder.Entity("WatchingService.Models.SeriesLiked", b =>
                {
                    b.Property<string>("ViewerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SeriesId")
                        .HasColumnType("int");

                    b.HasKey("ViewerId", "SeriesId");

                    b.HasIndex("SeriesId");

                    b.ToTable("SeriesLiked");
                });

            modelBuilder.Entity("WatchingService.Models.SeriesWatched", b =>
                {
                    b.Property<string>("ViewerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SeriesId")
                        .HasColumnType("int");

                    b.HasKey("ViewerId", "SeriesId");

                    b.HasIndex("SeriesId");

                    b.ToTable("SeriesWatched");
                });

            modelBuilder.Entity("WatchingService.Models.Viewer", b =>
                {
                    b.Property<string>("ViewerId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ViewerId");

                    b.ToTable("Viewer");
                });

            modelBuilder.Entity("WatchingService.Models.EpisodeWatched", b =>
                {
                    b.HasOne("WatchingService.Models.Episode", "Episode")
                        .WithMany("EpisodesWatched")
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WatchingService.Models.Viewer", "Viewer")
                        .WithMany("EpisodesWatched")
                        .HasForeignKey("ViewerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WatchingService.Models.SeriesLiked", b =>
                {
                    b.HasOne("WatchingService.Models.Series", "Series")
                        .WithMany("SeriesLiked")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WatchingService.Models.Viewer", "Viewer")
                        .WithMany("SeriesLiked")
                        .HasForeignKey("ViewerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WatchingService.Models.SeriesWatched", b =>
                {
                    b.HasOne("WatchingService.Models.Series", "Series")
                        .WithMany("SeriesWatched")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WatchingService.Models.Viewer", "Viewer")
                        .WithMany("SeriesWatched")
                        .HasForeignKey("ViewerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
