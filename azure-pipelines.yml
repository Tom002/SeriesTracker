# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '70b2d43c-0211-4032-a9bd-757315ae0b9e'
  
  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build and push stage
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:        
    - task: DockerCompose@0
      inputs:
        containerregistrytype: 'Azure Container Registry'
        azureSubscription: 'Free Trial(61ffd3a2-e450-4103-897d-0393cbca31ff)'
        azureContainerRegistry: '{"loginServer":"seriestrackerregistry.azurecr.io", "id" : "/subscriptions/61ffd3a2-e450-4103-897d-0393cbca31ff/resourceGroups/seriestracker/providers/Microsoft.ContainerRegistry/registries/seriestrackerregistry"}'
        dockerComposeFile: '**/docker-compose.yml'
        additionalDockerComposeFiles: 'docker-compose.prod.yml'
        dockerComposeFileArgs: |
          ApplicationInsightsInstrumentationKey=bf42f32d-31a7-4660-a656-7d4f70d21fa6
          IdentityDbConnectionString=Server=tcp:seriestracker-identitydb.database.windows.net,1433;Initial Catalog=IdentityDb;Persist Security Info=False;User ID=dbLogin;Password=BigPassw0rd;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;
          UsersDbConnectionString=Server=tcp:seriestracker-usersdb.database.windows.net,1433;Initial Catalog=UsersDb;Persist Security Info=False;User ID=dbLogin;Password=BigPassw0rd;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;
          ReviewDbConnectionString=Server=tcp:seriestracker-reviewdb.database.windows.net,1433;Initial Catalog=ReviewDb;Persist Security Info=False;User ID=dbLogin;Password=BigPassw0rd;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;
          WatchingDbConnectionString=Server=tcp:seriestracker-watchingdb.database.windows.net,1433;Initial Catalog=WatchingDb;Persist Security Info=False;User ID=dbLogin;Password=BigPassw0rd;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;
          BrowsingDbConnectionString=Server=tcp:seriestracker-browsingdb.database.windows.net,1433;Initial Catalog=BrowsingDb;Persist Security Info=False;User ID=dbLogin;Password=BigPassw0rd;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;
        action: 'Build services'
        additionalImageTags: 'v1'
    
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          export id=$(docker images --filter "label=test=true" -q | head -1)
              docker create --name testcontainer $id
              docker cp testcontainer:/testresults ./testresults
              docker rm testcontainer
              ls ./testresults
    
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'VSTest'
        testResultsFiles: '**/*tests.xml'
        searchFolder: '$(System.DefaultWorkingDirectory)/testresults'
    
    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/testresults/coverage/coverage.cobertura.xml'
        reportDirectory: '$(System.DefaultWorkingDirectory)/testresults/reports'
      
    - task: DockerCompose@0
      inputs:
        containerregistrytype: 'Azure Container Registry'
        azureSubscription: 'Free Trial(61ffd3a2-e450-4103-897d-0393cbca31ff)'
        azureContainerRegistry: '{"loginServer":"seriestrackerregistry.azurecr.io", "id" : "/subscriptions/61ffd3a2-e450-4103-897d-0393cbca31ff/resourceGroups/seriestracker/providers/Microsoft.ContainerRegistry/registries/seriestrackerregistry"}'
        dockerComposeFile: '**/docker-compose.yml'
        additionalDockerComposeFiles: 'docker-compose.prod.yml'
        action: 'Push services'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: 'Kubernetes'
        ArtifactName: 'helm_charts'
        publishLocation: 'Container'

